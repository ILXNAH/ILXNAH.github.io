<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Networkchuck on ILXNAH.github.io</title>
    <link>http://localhost:1313/tags/networkchuck/</link>
    <description>Recent content in Networkchuck on ILXNAH.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 28 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/networkchuck/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://localhost:1313/posts/creating-an-obsidian-blog-with-bros-hugo-and-chuck/</link>
      <pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/creating-an-obsidian-blog-with-bros-hugo-and-chuck/</guid>
      <description>&lt;p&gt;Following a &lt;a href=&#34;https://www.youtube.com/watch?v=dnE7c0ELEH8&#34;&gt;tutorial video from NetworkChuck&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;lsquo;We only know what we make&amp;rsquo;
&lt;strong&gt;Hugo:&lt;/strong&gt;
- tool to convert .md into website code
- prereqs: see list below&lt;/p&gt;
&lt;h2 id=&#34;battle-plan&#34;&gt;Battle Plan!&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Using Obsidian for taking notes - simply &amp;ldquo;type out the blog&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Turn it into HTML code, aka &amp;ldquo;make it code&amp;rdquo; using a tool called &lt;strong&gt;Hugo&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Ship the code off/push site to GitHub&lt;/li&gt;
&lt;li&gt;I decided not to use Hostinger but am playing around with other ways of deployment.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will be setting this up on my Windows machine, but if you need Linux/Mac guidance, Chuck got those differences covered in &lt;a href=&#34;https://blog.networkchuck.com/posts/my-insane-blog-pipeline/&#34;&gt;his documentation&lt;/a&gt; as well. For the sake of my own sanity, I am keeping my email/username/paths within the commands, i.e. don&amp;rsquo;t forget to change them.&lt;/p&gt;</description>
      <content>&lt;p&gt;Following a &lt;a href=&#34;https://www.youtube.com/watch?v=dnE7c0ELEH8&#34;&gt;tutorial video from NetworkChuck&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;lsquo;We only know what we make&amp;rsquo;
&lt;strong&gt;Hugo:&lt;/strong&gt;
- tool to convert .md into website code
- prereqs: see list below&lt;/p&gt;
&lt;h2 id=&#34;battle-plan&#34;&gt;Battle Plan!&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Using Obsidian for taking notes - simply &amp;ldquo;type out the blog&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Turn it into HTML code, aka &amp;ldquo;make it code&amp;rdquo; using a tool called &lt;strong&gt;Hugo&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Ship the code off/push site to GitHub&lt;/li&gt;
&lt;li&gt;I decided not to use Hostinger but am playing around with other ways of deployment.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will be setting this up on my Windows machine, but if you need Linux/Mac guidance, Chuck got those differences covered in &lt;a href=&#34;https://blog.networkchuck.com/posts/my-insane-blog-pipeline/&#34;&gt;his documentation&lt;/a&gt; as well. For the sake of my own sanity, I am keeping my email/username/paths within the commands, i.e. don&amp;rsquo;t forget to change them.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Install everything&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Obsidian, Windows Terminal, Visual Studio Code, WSL 2, Golang, Python 3, Git and Hugo (add the .exe into your own program location - like Program Files - and also in Windows into PATH)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;posts&lt;/code&gt; folder within your Obsidian Workspace for your blog articles&lt;/li&gt;
&lt;li&gt;Within this folder, start a new note (that will be your first blog post)&lt;/li&gt;
&lt;li&gt;Double-check correct installations via the &lt;code&gt;version&lt;/code&gt; flagged commands:
&lt;code&gt;go version&lt;/code&gt;, &lt;code&gt;git --version&lt;/code&gt;, &lt;code&gt;hugo version&lt;/code&gt;, &lt;code&gt;python --version&lt;/code&gt; etc.&lt;/li&gt;
&lt;li&gt;Navigate to your desired directory for storing blog files on your machine, e.g.: &lt;code&gt;cd C:\Users\ilona\Documents\&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create a new folder for Hugo blog and set up git: &lt;code&gt;hugo new site optimeow&lt;/code&gt; &amp;gt; &lt;code&gt;cd .\optimeow&lt;/code&gt; &amp;gt; &lt;code&gt;git init&lt;/code&gt; &amp;gt; &lt;code&gt;git config --global user.name &amp;quot;ILXNAH&amp;quot;&lt;/code&gt; &amp;gt; &lt;code&gt;git config --global user.email &amp;quot;ILXNAH@tutanota.com&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Navigate to &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;Hugo Themes&lt;/a&gt; and pick a theme to install for your blog.&lt;/li&gt;
&lt;li&gt;Select option &amp;ldquo;Install theme as a submodule&amp;rdquo;, e.g. for &lt;a href=&#34;https://themes.gohugo.io/themes/hugo-theme-terminal/&#34;&gt;Terminal theme&lt;/a&gt; it looks like this:
&lt;code&gt;git submodule add -f https://github.com/panr/hugo-theme-terminal.git themes/terminal&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Edit config: the file is called &lt;code&gt;hugo.toml&lt;/code&gt; and it needs to match the theme
&lt;ul&gt;
&lt;li&gt;Terminal theme has a text file at the bottom of the page which you can copy it from (leave out module and module.imports at the bottom) and paste into your &lt;code&gt;hugo.toml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Via CLI, you can open it with programs &lt;code&gt;notepad hugo.toml&lt;/code&gt; like Chuck, or &lt;code&gt;npp hugo.toml&lt;/code&gt; like myself (that&amp;rsquo;s also custom though)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Next, run your Hugo server preview with &lt;code&gt;hugo serve&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;Take a look at &lt;a href=&#34;http://localhost:1313/&#34;&gt;//localhost:1313/&lt;/a&gt; &amp;gt; Ctrl+C to cancel website preview&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;syncing-obsidian-to-hugo&#34;&gt;Syncing Obsidian to Hugo&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;posts folder will be syncing from &lt;code&gt;Obsidian Vault/posts&lt;/code&gt; into &lt;code&gt;/blogname/content/posts&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd content&lt;/code&gt; &amp;gt; &lt;code&gt;mkdir posts&lt;/code&gt; (this new folder will be synced with Obsidian source folder) with this command: &lt;code&gt;robocopy &amp;quot;C:\Users\ilona\Documents\my_second_brain\posts&amp;quot; &amp;quot;C:\Users\ilona\Documents\optimeow\content\posts&amp;quot; /mir&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hugo serve&lt;/code&gt; to preview blog with imported posts &amp;gt; Ctrl+C the preview again&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;using-frontmatter-in-obsidian&#34;&gt;Using Frontmatter in Obsidian&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;set up metadata via Obsidian properties
&lt;ul&gt;
&lt;li&gt;you can use a variation of community plugins
&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;m using &lt;strong&gt;make.md&lt;/strong&gt;, Chuck is using &lt;strong&gt;Templater&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;make sure the draft property is unchecked, so the post is displayed
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hugo server -D&lt;/code&gt; command will publish any posts in draft mode inclusively&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ideally create a template with desired properties for your blog posts&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;run robocopy again with added post properties in source .md&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hugo serve&lt;/code&gt; to see if properties OK &amp;gt; exit preview&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fixing-image-attachments-using-a-provided-python-script&#34;&gt;Fixing image attachments using a provided Python script&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;in your Hugo blog dir, &lt;code&gt;cd static&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mkdir images&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd ..&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;code images.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;insert code, make sure to edit all three paths to your own, and save:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; re
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; shutil
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Paths (using raw strings to handle Windows backslashes correctly)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;posts_dir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:\Users\ilona\Documents\optimeow\content\posts&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;attachments_dir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:\Users\ilona\Documents\my_second_brain\Attachments&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;static_images_dir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:\Users\ilona\Documents\optimeow\static\images&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Step 1: Process each markdown file in the posts directory&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; filename &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;listdir(posts_dir):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; filename&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;endswith(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.md&amp;#34;&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        filepath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(posts_dir, filename)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(filepath, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; file:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# Step 2: Find all image links in the format ![Image Description](/images/Pasted%20image%20...%20.png)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        images &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;findall(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\[\[([^]]*\.png)\]\]&amp;#39;&lt;/span&gt;, content)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# Step 3: Replace image links and ensure URLs are correctly formatted&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; image &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; images:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# Prepare the Markdown-compatible link with %20 replacing spaces&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            markdown_image &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;![Image Description](/images/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;image&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%20&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; content&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;image&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]]&amp;#34;&lt;/span&gt;, markdown_image)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# Step 4: Copy the image to the Hugo static/images directory if it exists&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            image_source &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(attachments_dir, image)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exists(image_source):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                shutil&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy(image_source, static_images_dir)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# Step 5: Write the updated content back to the markdown file&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(filepath, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; file:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(content)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Markdown files processed and images copied successfully.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;added image for testing purposes of the part of the script we just did:
&lt;img src=&#34;http://localhost:1313/images/Pasted%20image%2020250131130510.png&#34; alt=&#34;Image Description&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pushing-code-into-github&#34;&gt;Pushing code into GitHub&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;create an account, log in, create a repo for your blog&lt;/li&gt;
&lt;li&gt;you will need an SSH key, which you can generate with &lt;code&gt;ssh-keygen -t rsa -b 4096 -C &amp;quot;ILXNAH@tutanota.com&amp;quot;&lt;/code&gt; if you don&amp;rsquo;t have one yet&lt;/li&gt;
&lt;li&gt;this keypair (public and private key) will be created in dir &lt;code&gt;~/.ssh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;within that dir, to add pubkey to GitHub, copy its content displayed via &lt;code&gt;cat .\id_rsa.pub&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;GitHub &amp;gt; Settings &amp;gt; SSH &amp;gt; New key &amp;gt; paste in there&lt;/li&gt;
&lt;li&gt;test that it&amp;rsquo;s working on your PC with cmd &lt;code&gt;ssh -T git@github.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;in your blog dir, &lt;code&gt;git remote add origin git@github.com:ILXNAH/optimeow.git&lt;/code&gt; to define the remote repo (the one you created on GitHub) aka add it to your local setup&lt;/li&gt;
&lt;li&gt;type cmd &lt;code&gt;hugo&lt;/code&gt; to make sure our website has been built&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git add .&lt;/code&gt; to add all files in current dir to our repo&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit -m &amp;quot;First commit&amp;quot;&lt;/code&gt; to commit those changes (locally)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -u origin main&lt;/code&gt; to push from local to remote repo
(specified is: first, name of your remote repo &lt;code&gt;origin&lt;/code&gt;, then branch name &lt;code&gt;main&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;git-push-side-note&#34;&gt;Git push side note&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;easy way to undo the &lt;strong&gt;last&lt;/strong&gt; push if you make a mistake:
&lt;code&gt;git push -f origin HEAD^:main&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;or view the history of the pushes with:
&lt;code&gt;git reflog --grep-reflog=push origin/main&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;and then, you can reference an older push as well:
&lt;code&gt;git push -f origin last_known_good_commit:branch_name&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;tracking-empty-folders-in-git&#34;&gt;Tracking empty folders in Git&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;for e.g. &lt;code&gt;assets&lt;/code&gt; folder in blog dir: &lt;code&gt;New-Item -Path &amp;quot;assets\.gitkeep&amp;quot; -ItemType &amp;quot;File&amp;quot;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;commit &amp;gt; push&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;publishing-for-free-to-github-pages&#34;&gt;Publishing for free to GitHub Pages&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;following this &lt;a href=&#34;https://medium.com/@magstherdev/github-pages-hugo-86ae6bcbadd&#34;&gt;Medium guide by @Magstherdev&lt;/a&gt; and &lt;a href=&#34;https://gohugo.io/hosting-and-deployment/hosting-on-github/&#34;&gt;official guide on Hugo&amp;rsquo;s site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hugo -d docs&lt;/code&gt; creates a directory &lt;code&gt;docs&lt;/code&gt; inside blog dir, which we need for (GitHub) Pages (instead of the &lt;code&gt;public&lt;/code&gt; folder which Chuck uses)&lt;/li&gt;
&lt;li&gt;open &lt;code&gt;code hugo.toml&lt;/code&gt; and add this line under line 6:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-hugo.toml&#34; data-lang=&#34;hugo.toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;publishDir&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;docs&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;with &lt;code&gt;python3 -m http.server 8080 --directory docs&lt;/code&gt; you can preview in there
&lt;ul&gt;
&lt;li&gt;when changing posts and do &lt;code&gt;robocopy&lt;/code&gt; + &lt;code&gt;images.py&lt;/code&gt; as mentioned previously, to reflect changes in the &lt;code&gt;docs&lt;/code&gt; dir, you need to run cmd &lt;code&gt;hugo -d docs&lt;/code&gt; and then preview w/ python as above
&lt;ul&gt;
&lt;li&gt;if you use cmd &lt;code&gt;hugo&lt;/code&gt; without specified flag, it will update the default &lt;code&gt;public&lt;/code&gt; folder as well as the &lt;code&gt;docs&lt;/code&gt; folder (as configured in hugo.toml)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;verified reflected changes via &lt;code&gt;ls&lt;/code&gt; timestamp and compare preview with the one which should have now been on older version:
&lt;code&gt;python3 -m http.server 8080 --directory public&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;with this workflow you can:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;create &lt;code&gt;docs&lt;/code&gt; directory which replaces &lt;code&gt;public&lt;/code&gt; folder&amp;rsquo;s purpose&lt;/li&gt;
&lt;li&gt;edit blog &amp;gt; robocopy &amp;gt; images.py &amp;gt; hugo -d docs &amp;gt; commit and push out&lt;/li&gt;
&lt;li&gt;keep the &lt;code&gt;public&lt;/code&gt; folder &amp;ldquo;outdated&amp;rdquo; and use it for local development&lt;/li&gt;
&lt;li&gt;make sure when previewing to use different ports (to avoid cross-caching versions), e.g.:
&lt;ul&gt;
&lt;li&gt;Pages on &lt;a href=&#34;http://localhost:8080/&#34;&gt;http://localhost:8080/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;dev on &lt;a href=&#34;http://localhost:8081/&#34;&gt;http://localhost:8081/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;let&amp;rsquo;s push it to our GitHub repo: &lt;code&gt;git add .&lt;/code&gt; &amp;gt; &lt;code&gt;git commit&lt;/code&gt; &amp;gt; &lt;code&gt;git push&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;some-more-tweaks-and-were-almost-done&#34;&gt;Some more tweaks and we&amp;rsquo;re almost done&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;in &lt;code&gt;hugo.toml&lt;/code&gt;, when using Pages from &lt;code&gt;/docs&lt;/code&gt;, we also need to edit URL configuration in Hugo&amp;rsquo;s config file (line 1): as below, replace with your own Pages link
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-hugo.toml&#34; data-lang=&#34;hugo.toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;baseurl&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://ilxnah.github.io/optimeow/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;the config file for Pages version is just a copy called &lt;code&gt;hugo.github.toml&lt;/code&gt;, which includes the additional URL defined as above&lt;/li&gt;
&lt;li&gt;I also kept the original &lt;code&gt;hugo.toml&lt;/code&gt; without this definition for local testing purposes&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;final-workflow&#34;&gt;Final Workflow:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;edit blog posts&lt;/li&gt;
&lt;li&gt;sync Obsidian into Hugo with &lt;code&gt;robocopy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;images.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;local dev &amp;gt; regenerate static site:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hugo -d public&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;local dev &amp;gt; preview:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;python3 -m http.server 8081 --directory public&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pages &amp;gt; regenerate static site:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hugo -d docs -c .\hugo.github.toml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pages &amp;gt; preview won&amp;rsquo;t work with content generated for live publish&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git add .&lt;/code&gt; &amp;gt; &lt;code&gt;git commit -m &amp;quot;Commit message&amp;quot;&lt;/code&gt; &amp;gt; &lt;code&gt;git push&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
  </channel>
</rss>
