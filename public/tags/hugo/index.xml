<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo on ILXNAH&#39;s den</title>
    <link>/tags/hugo/</link>
    <description>Recent content in Hugo on ILXNAH&#39;s den</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 28 Jan 2025 08:20:38 +0000</lastBuildDate><atom:link href="/tags/hugo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creating Obsidian blog with Hugo</title>
      <link>/posts/creating-obsidian-blog-with-hugo/</link>
      <pubDate>Tue, 28 Jan 2025 08:20:38 +0000</pubDate>
      
      <guid>/posts/creating-obsidian-blog-with-hugo/</guid>
      <description>&lt;hr&gt;
&lt;p&gt;Following a &lt;a href=&#34;https://www.youtube.com/watch?v=dnE7c0ELEH8&#34;&gt;video from NetworkChuck&lt;/a&gt;, then freestyling it to GitHub Pages.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;paths-using-raw-strings-to-handle-windows-backslashes-correctly&#34;&gt;Paths (using raw strings to handle Windows backslashes correctly)&lt;/h1&gt;
&lt;p&gt;posts_dir = r&amp;quot;C:\Users\ilona\Documents\ILXNAH.github.io\content\posts&amp;quot;
attachments_dir = r&amp;quot;C:\Users\ilona\Documents\obsidian\Attachments&amp;quot;
static_images_dir = r&amp;quot;C:\Users\ilona\Documents\ILXNAH.github.io\static\images&amp;quot;&lt;/p&gt;
&lt;h1 id=&#34;step-1-process-each-markdown-file-in-the-posts-directory&#34;&gt;Step 1: Process each markdown file in the posts directory&lt;/h1&gt;
&lt;p&gt;for filename in os.listdir(posts_dir):
if filename.endswith(&amp;quot;.md&amp;quot;):
filepath = os.path.join(posts_dir, filename)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    with open(filepath, &amp;quot;r&amp;quot;, encoding=&amp;quot;utf-8&amp;quot;) as file:
        content = file.read()

    # Step 2: Find all image links in the format ![Image Description](/images/Pasted%20image%20...%20.png)
    images = re.findall(r&#39;\[\[([^]]*\.(?:png|jpg|jpeg))\]\]&#39;, content)

    # Step 3: Replace image links and ensure URLs are correctly formatted
    for image in images:
        # Prepare the Markdown-compatible link with %20 replacing spaces
        markdown_image = f&amp;quot;![Image Description](/images/{image.replace(&#39; &#39;, &#39;%20&#39;)})&amp;quot;
        content = content.replace(f&amp;quot;[[{image}]]&amp;quot;, markdown_image)

        # Step 4: Copy the image to the Hugo static/images directory if it exists
        image_source = os.path.join(attachments_dir, image)
        if os.path.exists(image_source):
            shutil.copy(image_source, static_images_dir)

    # Step 5: Write the updated content back to the markdown file
    with open(filepath, &amp;quot;w&amp;quot;, encoding=&amp;quot;utf-8&amp;quot;) as file:
        file.write(content)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;print(&amp;ldquo;Markdown files processed and images copied successfully.&amp;rdquo;)&lt;/p&gt;</description>
      <content>&lt;hr&gt;
&lt;p&gt;Following a &lt;a href=&#34;https://www.youtube.com/watch?v=dnE7c0ELEH8&#34;&gt;video from NetworkChuck&lt;/a&gt;, then freestyling it to GitHub Pages.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;paths-using-raw-strings-to-handle-windows-backslashes-correctly&#34;&gt;Paths (using raw strings to handle Windows backslashes correctly)&lt;/h1&gt;
&lt;p&gt;posts_dir = r&amp;quot;C:\Users\ilona\Documents\ILXNAH.github.io\content\posts&amp;quot;
attachments_dir = r&amp;quot;C:\Users\ilona\Documents\obsidian\Attachments&amp;quot;
static_images_dir = r&amp;quot;C:\Users\ilona\Documents\ILXNAH.github.io\static\images&amp;quot;&lt;/p&gt;
&lt;h1 id=&#34;step-1-process-each-markdown-file-in-the-posts-directory&#34;&gt;Step 1: Process each markdown file in the posts directory&lt;/h1&gt;
&lt;p&gt;for filename in os.listdir(posts_dir):
if filename.endswith(&amp;quot;.md&amp;quot;):
filepath = os.path.join(posts_dir, filename)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    with open(filepath, &amp;quot;r&amp;quot;, encoding=&amp;quot;utf-8&amp;quot;) as file:
        content = file.read()

    # Step 2: Find all image links in the format ![Image Description](/images/Pasted%20image%20...%20.png)
    images = re.findall(r&#39;\[\[([^]]*\.(?:png|jpg|jpeg))\]\]&#39;, content)

    # Step 3: Replace image links and ensure URLs are correctly formatted
    for image in images:
        # Prepare the Markdown-compatible link with %20 replacing spaces
        markdown_image = f&amp;quot;![Image Description](/images/{image.replace(&#39; &#39;, &#39;%20&#39;)})&amp;quot;
        content = content.replace(f&amp;quot;[[{image}]]&amp;quot;, markdown_image)

        # Step 4: Copy the image to the Hugo static/images directory if it exists
        image_source = os.path.join(attachments_dir, image)
        if os.path.exists(image_source):
            shutil.copy(image_source, static_images_dir)

    # Step 5: Write the updated content back to the markdown file
    with open(filepath, &amp;quot;w&amp;quot;, encoding=&amp;quot;utf-8&amp;quot;) as file:
        file.write(content)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;print(&amp;ldquo;Markdown files processed and images copied successfully.&amp;rdquo;)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- added image for testing purposes of the part of the script we just did:
	![Image Description](/images/Pasted%20image%2020250131130510.png)
#### Pushing code into GitHub
- create GitHub repo with name `ILXNAH.github.io` and set visibility to public
- you will need an SSH key, which you can generate with `ssh-keygen -t rsa -b 4096 -C &amp;#34;ILXNAH@tutanota.com&amp;#34;` if you don&amp;#39;t have one yet
- this keypair (public and private key) will be created in dir `~/.ssh`
- within that dir, to add pubkey to GitHub, copy its content displayed via `cat .\id_rsa.pub`
- GitHub &amp;gt; Settings &amp;gt; SSH &amp;gt; New key &amp;gt; paste in there
- test that it&amp;#39;s working on your PC with cmd `ssh -T git@github.com`
- in your blog dir, `git remote add origin git@github.com:ILXNAH/ILXNAH.github.io.git` to define the remote repo (the one you created on GitHub) aka add it to your local setup &amp;gt; `git branch -M main`
- type `hugo` to make sure website has been built
- `git add .` to add all changes
- `git commit -m &amp;#34;First commit&amp;#34;` to commit those changes (locally)
- `git push -u origin main` to push from local to remote repo
	(specified is: first, name of your remote repo `origin`, then branch name `main`)
#### Deploying to GitHub Pages
1. on repo website, go to Settings &amp;gt; Pages &amp;gt; Source: GitHub Actions
2. in your local repo, add folder &amp;#34;`.github`&amp;#34;
3. within there, create a folder called &amp;#34;`workflows`&amp;#34;
4. within there, create a &amp;#34;`hugo.yaml`&amp;#34; file
5. copy workflow code into `hugo.yaml` from [Hugo&amp;#39;s official documentation](https://gohugo.io/hosting-and-deployment/hosting-on-github/)
6. `git add .` &amp;gt; `git commit -m &amp;#34;github actions&amp;#34;` &amp;gt; `git push`
##### Publishing Workflow
1. `robocopy &amp;#34;C:\Users\ilona\Documents\obsidian\Hugo Posts&amp;#34; &amp;#34;C:\Users\ilona\Documents\ILXNAH.github.io\content\posts&amp;#34; /mir`
2. `python images.py`
3. `hugo`
4. (to view - can be skipped) `hugo serve --noHTTPCache`
	- use this flag to avoid site refresh being stuck due to cache (if you&amp;#39;re editing in real-time)
	- you can create alias: `hss=&amp;#39;hugo serve --noHTTPCache&amp;#39;`
5. `git add .` &amp;gt; `git commit -m &amp;#34;change&amp;#34;` &amp;gt; `git push`
#### Final automation script in PowerShell
The below script automates the publishing workflow steps above (apart from preview):
```powershell
# Set variables for Obsidian to Hugo copy
$sourcePath = &amp;#34;C:\Users\ilona\Documents\obsidian\Hugo Posts&amp;#34;
$destinationPath = &amp;#34;C:\Users\ilona\Documents\ILXNAH.github.io\content\posts&amp;#34;

# Set Github repo 
$myrepo = &amp;#34;git@github.com:ILXNAH/ILXNAH.github.io.git&amp;#34;

# Set error handling
$ErrorActionPreference = &amp;#34;Stop&amp;#34;
Set-StrictMode -Version Latest

# Change to the script&amp;#39;s directory
$ScriptDir = Split-Path -Parent $MyInvocation.MyCommand.Definition
Set-Location $ScriptDir

# Check for required commands
$requiredCommands = @(&amp;#39;git&amp;#39;, &amp;#39;hugo&amp;#39;)

# Check for Python command (python or python3)
if (Get-Command &amp;#39;python&amp;#39; -ErrorAction SilentlyContinue) {
    $pythonCommand = &amp;#39;python&amp;#39;
} elseif (Get-Command &amp;#39;python3&amp;#39; -ErrorAction SilentlyContinue) {
    $pythonCommand = &amp;#39;python3&amp;#39;
} else {
    Write-Error &amp;#34;Python is not installed or not in PATH.&amp;#34;
    exit 1
}
foreach ($cmd in $requiredCommands) {
    if (-not (Get-Command $cmd -ErrorAction SilentlyContinue)) {
        Write-Error &amp;#34;$cmd is not installed or not in PATH.&amp;#34;
        exit 1
    }
}

# Step 1: Check if Git is initialized, and initialize if necessary
if (-not (Test-Path &amp;#34;.git&amp;#34;)) {
    Write-Host &amp;#34;Initializing Git repository...&amp;#34;
    git init
    git remote add origin $myrepo
} else {
    Write-Host &amp;#34;Git repository already initialized.&amp;#34;
    $remotes = git remote
    if (-not ($remotes -contains &amp;#39;origin&amp;#39;)) {
        Write-Host &amp;#34;Adding remote origin...&amp;#34;
        git remote add origin $myrepo
    }
}

# Step 2: Sync posts from Obsidian to Hugo content folder using Robocopy
Write-Host &amp;#34;Syncing posts from Obsidian...&amp;#34;
if (-not (Test-Path $sourcePath)) {
    Write-Error &amp;#34;Source path does not exist: $sourcePath&amp;#34;
    exit 1
}
if (-not (Test-Path $destinationPath)) {
    Write-Error &amp;#34;Destination path does not exist: $destinationPath&amp;#34;
    exit 1
}

# Use Robocopy to mirror the directories
$robocopyOptions = @(&amp;#39;/MIR&amp;#39;, &amp;#39;/Z&amp;#39;, &amp;#39;/W:5&amp;#39;, &amp;#39;/R:3&amp;#39;)
$robocopyResult = robocopy $sourcePath $destinationPath @robocopyOptions
if ($LASTEXITCODE -ge 8) {
    Write-Error &amp;#34;Robocopy failed with exit code $LASTEXITCODE&amp;#34;
    exit 1
}

# Step 3: Process Markdown files with Python script to handle image links
Write-Host &amp;#34;Processing image links in Markdown files...&amp;#34;
if (-not (Test-Path &amp;#34;images.py&amp;#34;)) {
    Write-Error &amp;#34;Python script images.py not found.&amp;#34;
    exit 1
}

# Execute the Python script
try {
    &amp;amp; $pythonCommand images.py
} catch {
    Write-Error &amp;#34;Failed to process image links.&amp;#34;
    exit 1
}

# Step 4: Build the Hugo site
Write-Host &amp;#34;Building the Hugo site...&amp;#34;
try {
    hugo
} catch {
    Write-Error &amp;#34;Hugo build failed.&amp;#34;
    exit 1
}

# Step 5: Add changes to Git
Write-Host &amp;#34;Staging changes for Git...&amp;#34;
$hasChanges = (git status --porcelain) -ne &amp;#34;&amp;#34;
if (-not $hasChanges) {
    Write-Host &amp;#34;No changes to stage.&amp;#34;
} else {
    git add .
}

# Step 6: Commit changes with a dynamic message
$commitMessage = &amp;#34;Blog Update on $(Get-Date -Format &amp;#39;yyyy-MM-dd HH:mm:ss&amp;#39;)&amp;#34;
$hasStagedChanges = (git diff --cached --name-only) -ne &amp;#34;&amp;#34;
if (-not $hasStagedChanges) {
    Write-Host &amp;#34;No changes to commit.&amp;#34;
} else {
    Write-Host &amp;#34;Committing changes...&amp;#34;
    git commit -m &amp;#34;$commitMessage&amp;#34;
}

# Step 7: Push all changes to the main branch
Write-Host &amp;#34;Pushing to GitHub Main...&amp;#34;
try {
    git push origin main
} catch {
    Write-Error &amp;#34;Failed to push to Main branch.&amp;#34;
    exit 1
}

Write-Host &amp;#34;All done! Site synced, processed, committed, built, and deployed.&amp;#34;
&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
  </channel>
</rss>
